// Автоматически импортируем все изображения из lesson1
const images = import.meta.glob(
  "../../assets/images/levels/beginner/lesson1/*.png",
  {
    eager: true,
    import: "default",
  }
);
const images2 = import.meta.glob(
  "../../assets/images/levels/beginner/lesson2/*.png",
  { eager: true, import: "default" }
);

const images3 = import.meta.glob(
  "../../assets/images/levels/beginner/lesson3/*.png",
  { eager: true, import: "default" }
);

const rawSteps = [
  {
    text: "А значит мы сможем сразу начать программировать (Рисунок 1).",
  },
  {
    text: "На этом занятии мы создадим свою первую программу, научимся добавлять спрайты и фоны. Сначала перейдем на сайт и создадим проект (Рисунок 2). Для создания проекта необходимо нажать на одну из выделенных кнопок «Создавай» или «Начни создавать» (Рисунок 2).",
  },
  {
    text: "После этого открывается новое окно – это и есть редактор проекта, в котором мы будем создавать игры, анимации и многое другое. По умолчанию сразу появится изображение котика (Рисунок 3)",
  },
  {
    text: [
      "Интерфейс Scratch включает в себя следующий элементы (Рисунок 3):",
      "1. Подгруппы команд;",
      "2. Блоки кода;",
      "3. Поле для программирования;",
      "4. Сцена;",
      "5. Настройки спрайта;",
      "6. Спрайты, использованные в проекте.",
      "Спрайт – это персонаж, предмет или любой другой элемент в проекте, который можно запрограммировать для выполнения различных действий.",
      "Подгруппы команд нужны для того, чтобы быстро переключаться между блоками команд. Они разделены по цветам, для лучшего визуального ориентирования в коде.",
      "Каждая из групп включает в себя команды, которые выполняют действия, присущие этой группе. Они так же разделены по соответствующим цветам.",
      "В поле для программирования строится сам код программы. Команды могут находится в нём в хаотичном порядке. При увеличении программы увеличивается и само поле.",
      "На сцене расставляются спрайты (объекты). Она имеет размер 480х360. Каждый из спрайтов на ней имеет собственное положение, то есть координаты (по х и у). ",
      "В настройках можно задать имя файла, его координаты, отобразить или скрыть спрайт, установить размер и направление спрайта (лево, право, верх, низ).",
      "В окне спрайтов отображаются все спрайты, которые добавлены в проект. Для каждого из них пишется отдельный код. ",
      "Для того, чтобы начать программировать, нужно выбрать спрайты, которые будем использовать в своём проекте. Для выбора спрайта наводим курсор мыши на клавишу (находится в нижнем правом углу). Откроется следующее (Рисунок 4):",
    ],
  },
  {
    text: [
      "Каждая из кнопок отвечают за следующие действия (снизу-вверх):",
      "1. Выбрать спрайт из предустановленных;",
      "2. Нарисовать спрайт;",
      "3. Случайный спрайт;",
      "4. Загрузка спрайта с компьютера.",
      "Давайте создадим диалог между двумя друзьями, у нас в проекте уже есть рыжий кот. Давайте добавим еще одного персонажа. ",
      "Нажимаем кнопку «Выбрать спрайт» и перед нами открывается следующее окно (Рисунок 5):",
    ],
  },
  {
    text: "Выберем любого понравившегося нам персонажа, например из раздела Животные. Давайте возьмем персонажа Chick – кликаем по нему левой кнопкой мыши (Рисунок 6)",
  },
  { text: "Сейчас два спрайта расположены рядом (Рисунок 7)." },
  {
    text: "Как тогда два персонажа будут общаться между собой? Наведем курсор мыши на спрайт, зажмем левую кнопку мыши и переместим персонажа немного вправо (Рисунок 8). Теперь персонажи находятся на достаточном расстоянии друг от друга.",
  },
  {
    text: "Теперь поместим спрайты друг напротив друга. Нажмем на персонажа Chick левой кнопкой мыши, чтобы сделать его активным  (Рисунок 9).",
  },
  {
    text: "Теперь нажмем на строчку «Направление» в разделе «Настройка спрайта». Сейчас там стоит значение по умолчанию 90 (Рисунок 10).",
  },
  {
    text: "В появившемся окне нажмем на кнопку посередине, а после потянем фиолетовую стрелочку влево, чтобы значение с 90 изменилось на -90. Отлично! Мы смогли развернуть персонажа в нужную сторону (Рисунок 11).",
  },
  {
    text: "Теперь напишем диалог! Из раздела События перетаскиваем элемент «Когда флажок нажат» на рабочую область. Как только нажмем на зеленый флажок, программа должна запуститься (Рисунок 12). ",
  },
  {
    text: [
      "Если сейчас мы нажмем на Зеленый флажок, то ничего не произойдет, так как мы не написали программу.",
      "Давайте исправим это и добавим первую фразу рыжему Котику.",
      "Для этого заходим в раздел «Внешний вид» и выбираем первое действие «Говорить Привет 2 секунды» (Рисунок 13).",
    ],
  },
  {
    text: [
      "Теперь, если мы нажмем на Зеленый флаг, то Котик будет говорить Цыпленку «Привет!».",
      "Давайте напишем ответ Цыпленка.",
      "Нажимаем на Цыпленка и добавляем ему из вкладки «События» действие «Когда Зеленый флаг нажат», далее добавляем из раздела «Управление» действие «Ждать 2 секунды». Это нужно, чтобы персонажи не перебивали друг друга (Рисунок 14).",
    ],
  },
  {
    text: "Теперь можно добавить действие «Говорить Привет 2 секунды» и «Говорить «Как дела?» 2 секунды» (Рисунок 15).",
  },
  {
    text: "Перейдем в программу Котика и добавим строчку «Ждать 4 секунды», чтобы Цыпленок успел договорить свою реплику (Рисунок 16).",
  },
  {
    text: "Теперь добавим ответ Котика на фразу Цыпленка. Можете самостоятельно придумать ответ (Рисунок 17).",
  },
  {
    text: "Давайте проверим, правильно ли работает наша программа. Нажмем на Зеленый Флаг и посмотрим, что получилось (Рисунок 18).",
  },
  {
    text: [
      "Теперь можете пофантазировать и придумать дальнейший диалог персонажей!",
      "Обязательно проверьте правильность выполнения программы: не перебивают ли персонажи друг друга, идут ли диалоги в нужном порядке и тд.",
      "Далее сохраним полученный проект и загрузим его для проверки. Нажмем на верхней панеле на «Файл» (Рисунок  19).",
    ],
  },
  {
    text: "После в выпадающем списке выбираем «Сохранить на свой компьютер». Теперь файл с проектом сохранен в Загрузки на вашем компьютере (Рисунок 20).",
  },
];

const rawSteps2 = [
  {
    text: "Подсказка: чтобы добавить нового персонажа, нужно нажать на эту кнопку (Рисунок 1).",
  },
  { text: "Вот что должно получиться (Рисунок 2):" },
  {
    text: [
      "После этого добавим несколько реплик для каждого спрайта.",
      "Начнем с нового спрайта. Со вкладки «События» возьмем команду «Когда Зеленый Флажок нажат» и перетащим на рабочую область.",
      "Далее из вкладки «Внешний вид» добавим дважды команду «Говорить Привет 2 секунды» и изменим текст второй программы на «Хочешь фокус?». После из вкладки управление поставим программу «Ждать 4 секунды». Вот что должно получиться (Рисунок 3):",
    ],
  },
  {
    text: [
      "Отлично! Теперь добавим ответ Котика.",
      "Ему также добавим команду «Когда Зеленый флажок нажат» из вкладки «События», далее добавляем из вкладки «Управление» команду «Ждать 4 секунды», чтобы первый персонаж сказал свою реплику.",
      "Ниже поставим 2 программы «Говорить Привет 2 секунды». Текст второй изменим на «Да». После снова добавляем из вкладки «Управление» команду «Ждать 2 секунды». Такой результат должен получиться (Рисунок 4):",
    ],
  },
  {
    text: "Мы справились! Вернемся к первому персонажу. Поставим ему еще одну фразу «Говорить Тогда смотри 2 секунды». Теперь наша программа выглядит так (Рисунок 5):",
  },
  {
    text: [
      "Перед тем, как продолжить давай узнаем, как добавлять и редактировать фоны в Scratch.",
      "Это сцена и здесь мы можем менять, добавлять собственные и использовать уже готовые фоны (Рисунок 6).",
    ],
  },
  {
    text: [
      "Когда мы наведем указатель мыши на фиолетовый кружок, то появится список с возможными действиями (Рисунок 7):",
      "1. Загрузить фон с компьютера",
      "2. Выбрать случайный",
      "3. Нарисовать ",
      "4. Выбрать фон из предустановленных",
    ],
  },
  {
    text: "Нам нужен последний вариант. Нажмем на него левой кнопкой мыши. Теперь перед нами открылись уже установленные фоны Scratch (Рисунок 8).",
  },
  {
    text: "Давай выберем любой понравившейся. Для примера мы возьмем фон Blue Sky (Рисунок 9).",
  },
  {
    text: "Теперь таким же образом добавь еще один фон. После этого на вкладке «Сцена» мы увидим, что у нас в проекте стало 3 фона (Рисунок 10), один из которых пустой, то есть белый. Этот фон нам нужно будет удалить, чтобы получился интересный «фокус».",
  },
  {
    text: "Для удаления ненужного фона нам необходимо сделать активной вкладку «Сцена», это значит, что нам нужно один раз левой кнопкой мыши нажать по ней. После этого действия она станет фиолетовой, а в блоках кода появятся команды для настройки фона (Рисунок 11).",
  },
  {
    text: "Теперь нажмем на вкладку фоны в левом верхнем углу, чтобы отредактировать уже добавленные фоны (Рисунок 12).",
  },
  {
    text: "Далее нажмем на «Фон 1», сделав его активным, а после удалим его, кликнув на мусорное ведро в правом верхнем углу (Рисунок 13).",
  },
  {
    text: "Успешно! Теперь у нас должно остаться 2 фона, которые мы ранее добавили в проект (Рисунок 14).",
  },
  {
    text: [
      "Теперь, когда все готово, вернемся к изначальному коду. Для этого в левом верхнем углу, нажмем на вкладку «Код», а после выберем персонажа, который будет показывать «фокус». В нашем случае это Летучая мышь.",
      "Мы на финишной прямой! Осталось добавить последнюю команду и наша программа будет готова!",
      "Зайдем во вкладку «Внешний Вид» и выберем действие «Следущий фон» (Рисунок 15).",
    ],
  },
];

const rawSteps3 = [
  {
    text: "Для начала добавим в проект эти спрайты: Pufferfish (Рыба ёж), Jellyfish (Медуза), Starfish (Морская звезда) и Crab (Краб) (Рисунок 1).",
  },
  {
    text: "Далее добавим морской фон. Нажмем в правом нижнем углу на иконку фона и в открывшемся окне выберем раздел «Подводный мир» (Рисунок 2).",
  },
  { text: "И выберем любой из представленных фонов (Рисунок 3)." },
  {
    text: [
      "Отлично, нам осталось запрограммировать морских жителей.",
      "У каждого спрайта будет своя анимация. Один будет передвигаться по дну океана, другой – поворачиваться вокруг себя, а третий – менять свой облик.",
      "Начнем с Морской звезды. Для этого персонажа есть несколько костюмов, так почему бы нам не анимировать его? Нам нужно запустить анимацию так, чтобы она работала постоянно. Сделать это можно с помощью цикла!",
      "Цикл – это многократное повторение одних и тех же действий. Например, циклом можно назвать смену дня и ночи, ваш день рождения, который наступает каждый год или танец!",
      "Приступим к программированию. На рабочую область добавим команду «Когда Зеленый флажок нажат». После из вкладки «Управление» добавим цикл «Повторять всегда». Это значит, что наша программа будет работать постоянно, когда флажок будет нажат (Рисунок 4).",
    ],
  },
  {
    text: "Добавим внутрь цикла действие «Следующий костюм», а ниже команду «Ждать 0.5 секунд». Это значит, что костюм спрайта будет меняться на следующий каждые полсекунды (Рисунок 5).",
  },
  {
    text: [
      "Давайте запустим программу и проверим правильность ее выполнения. Если всё работает корректно, то идем дальше!",
      "Следующий спрайт, который мы будем программировать – это Медуза.",
      "По задумке Медуза будет крутиться и менять свой цвет. Также как и Морской звезде, добавим строки кода «Когда Зеленый флажок нажат» и цикл «Повторять всегда». Далее зайдем в раздел «Движение» и выберем команду «Повернуть вправо на 5 градусов».  Ее нужно поставить внутрь цикла (Рисунок 6).",
    ],
  },
  {
    text: "Теперь зайдем в раздел «Внешний вид» и поставим в код строчку «Изменить эффект Цвет на 1» (Рисунок 7).",
  },
  {
    text: [
      "Программа для Медузы готова!",
      "Перейдем к более сложному. Следующим будет Краб. Краб должен будет ходить по морскому дну из стороны в сторону.",
      "По аналогии с предыдущими спрайтами, ставим в программу спрайта «Когда Зеленый флажок нажат» и «Повторять всегда».",
      "Теперь зайдем в раздел «Движение» и внутрь цикла поставим команду «Идти 5 шагов». Количество шагов в программе отвечает за скорость перемещения персонажа. Чем больше будет это значение, тем быстрее он будет передвигаться.",
      "После из этого же раздела добавим команду «Если касается края, оттолкнуться». Это нужно, чтобы спрайт всегда был в пределах видимости проекта. Вот готовый код для Краба (Рисунок 8).",
    ],
  },
  {
    text: [
      "Если сейчас мы запустим программу, то заметим, что Краб при каждом столкновении с краем переворачивается и ползет на голове. Это нужно исправить.",
      "Для этого зайдем в «Направление» в настройках спрайта и выберем кнопку посередине для поворота персонажа влево-вправо (Рисунок 9).",
    ],
  },
  {
    text: [
      "Теперь проблема исправлена! Краб правильно бегает вправо-влево, отталкиваясь от краев сцены.",
      "Мы на финишной прямой! Осталось запрограммировать спрайт Рыбы Ежа. Рыба Еж будет сначала раздуваться, а потом уменьшаться в размерах.",
      "Как и другим персонажам ставим программу «Когда Зеленый флажок нажат». После этого из вкладки «Внешний вид» добавляем строчку «Установить размер 100%». Это нужно, чтобы при каждом запуске рыба возвращалась к изначальному размеру (Рисунок 10).",
    ],
  },
  {
    text: "После этой строчки добавим цикл «Повторять всегда», а в него поставим цикл «Повторять 10 раз». Теперь внутрь второго цикла поставим действие «Изменить размер на 10%» (Рисунок 11).",
  },
  {
    text: [
      "Написанный цикл будет 10 раз увеличивать размер Рыбы Ежа на 10%, из-за этого будет создаваться впечатление «раздувания» рыбы.",
      "После цикла «Повторить 10 раз» нам необходимо подождать 1 секунду, чтобы задержать рыбу в раздутом положении.  Поэтом у ставим команду «Ждать 1 секунду» (Рисунок 12).",
    ],
  },
  {
    text: [
      "Далее вновь используем цикл «повторить 10 раз», но на этот раз мы поставим внутрь команду «Изменить размер на -10%». Почему так? Потому что теперь Рыба Еж должна уменьшаться до первоначального размера спрайта. Уменьшение будет получаться за счет знака «минус».",
      "После цикла вновь ставим программу «Ждать 1 секунду». Вот такая программа должна получиться (Рисунок 13).",
    ],
  },
];

const steps = Object.keys(images)
  .sort((a, b) => {
    const numA = parseInt(a.match(/img_(\d+)\.png/)[1], 10);
    const numB = parseInt(b.match(/img_(\d+)\.png/)[1], 10);
    return numA - numB;
  })
  .map((path, index) => ({
    text: rawSteps[index]?.text || `Шаг ${index + 1}`,
    caption: `Рисунок ${index + 1}`,
    image: images[path],
  }));

const steps2 = Object.keys(images2)
  .sort((a, b) => {
    const numA = parseInt(a.match(/img_(\d+)\.png/)[1], 10);
    const numB = parseInt(b.match(/img_(\d+)\.png/)[1], 10);
    return numA - numB;
  })
  .map((path, index) => ({
    text: rawSteps2[index]?.text || `Шаг ${index + 1}`,
    caption: `Рисунок ${index + 1}`,
    image: images2[path],
  }));

const steps3 = Object.keys(images3)
  .sort((a, b) => {
    const numA = parseInt(a.match(/img_(\d+)\.png/)[1], 10);
    const numB = parseInt(b.match(/img_(\d+)\.png/)[1], 10);
    return numA - numB;
  })
  .map((path, index) => ({
    text: rawSteps3[index]?.text || `Шаг ${index + 1}`,
    caption: `Рисунок ${index + 1}`,
    image: images3[path],
  }));

export const lessons = {
  beginner: {
    1: {
      title: "Дорога из жёлтого кирпича",
      lessonNumber: "Урок 1: Знакомство со Scratch",
      intro: [
        "Меня зовут Элли! Вместе со мной и моими друзьями ты погрузишься в мир увлекательного программирования и узнаешь много нового!",
        "Программировать совсем не сложно, если ты пользуешься специальными инструментами, например Scratch.",
        "Он простой и удобный, также его не нужно устанавливать на компьютер. Scratch доступен онлайн по ссылке https://scratch.mit.edu/",
      ],
      steps,
      final: "Поздравляю! Ты смог сделать свою первую программу!",
      task: "Создай проект с анимированным персонажем и фоном. Сохрани его и отправь учителю.",
    },
    2: {
      title: "Дорога из жёлтого кирпича",
      lessonNumber: "Урок 2: Смена фона",
      intro: [
        "В этом уроке ты закрепишь знания, полученные на прошлом занятии, и узнаешь, как добавлять и менять фон в Scratch. Давай приступим!",
        "Сначала добавим к спрайту Котика еще одного персонажа. В этот раз можешь выбрать любого понравившегося.",
      ],
      steps: steps2,
      final: [
        "Давай проверим программу! Нажми на зеленый флажок в левом верхнем углу. Если написано всё правильно, то персонажи будут поочередно говорить, а после диалога фон будет меняться.",
        "Попробуй поэкспериментировать, добавив еще несколько фонов и посмотри, как они будут меняться.",
        "Не забудь сохранить готовую программу и отправить ее на проверку!",
        "До скорых встреч!",
      ],
      task: "Создай проект со сменой фона и диалогами персонажей. Сохрани его и отправь учителю.",
    },
    3: {
      title: "Дорога из жёлтого кирпича",
      lessonNumber: "Урок 3: Анимация",
      intro: [
        "Сегодня мы вновь узнаем новое и закрепим пройденный материал!",
        "В этом уроке мы научимся анимировать жителей морского дна и познакомимся с циклами.",
      ],
      steps: steps3,
      final: [
        "Ура! Программа готова! Проверяй ее, нажав на Зеленый флажок. Если все работает правильно, то каждый персонаж будет проигрывать свою анимацию!",
        "Успехов тебе!",
      ],
      task: "Создай проект с анимацией разных персонажей. Сохрани его и отправь учителю.",
    },
  },
};
